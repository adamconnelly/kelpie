{{- define "parameterWithTypeList" -}}
{{ range $i, $param := . }}{{ if $i }}, {{ end }}{{ $param.Name }} {{ $param.Type }}{{ end }}
{{- end -}}

{{- define "parameterList" -}}
{{ range $i, $param := . }}{{ if $i }}, {{ end }}{{ $param.Name }}{{ end }}
{{- end -}}

{{- define "resultWithTypeList" -}}
{{ range $i, $result := . }}{{ if $i }}, {{ end }}{{ if $result.Name }}{{ $result.Name }}{{ else }}r{{ $i }}{{ end }} {{ $result.Type }}{{ end }}
{{- end -}}

{{- define "resultList" -}}
{{ range $i, $result := . }}{{ if $i }}, {{ end }}{{ if $result.Name }}{{ $result.Name }}{{ else }}r{{ $i }}{{ end }}{{ end }}
{{- end -}}

{{- define "resultTypeList" -}}
{{ if gt (len .) 1 }}({{ end }}{{ range $i, $result := . }}{{ if $i }}, {{ end }}{{ $result.Type }}{{ end }}{{ if gt (len .) 1 }}){{ end }}
{{- end -}}

{{- define "observationCallback" -}}
func({{ template "parameterWithTypeList" .Parameters }}){{ if .Results }} {{ template "resultTypeList" .Results }}{{ end }}
{{- end -}}

{{- define "matcherTypeParams" -}}
{{ range $i, $param := . }}{{ if ne $i 0 }}, {{ end }}P{{ $i }} {{ $param.Type }} | mocking.Matcher[{{ $param.Type }}]{{ end }}
{{- end -}}

{{- define "matcherParams" -}}
{{ range $i, $param := . }}{{ if ne $i 0 }}, {{ end }}{{ $param.Name }} P{{ $i }}{{ end }}
{{- end -}}

// Code generated by Kelpie. DO NOT EDIT.
package {{ .PackageName }}

import (
	{{- range $import := .Imports }}
	{{ $import }}
	{{- end }}
	"github.com/adamconnelly/kelpie"
	"github.com/adamconnelly/kelpie/mocking"
)

type Mock struct {
	mocking.Mock
	instance Instance
}

func NewMock() *Mock {
	mock := Mock{
		instance: Instance{},
	}
	mock.instance.mock = &mock

	return &mock
}

type Instance struct {
	mock *Mock
}

{{- range $method := .Methods }}

{{ if $method.Comment }}{{ CommentBlock $method.Comment }}
{{ end -}}
func (m *Instance) {{ $method.Name }}({{ template "parameterWithTypeList" $method.Parameters }}){{ if $method.Results }} ({{ template "resultWithTypeList" $method.Results }}){{ end }} {
	expectation := m.mock.Call("{{ $method.Name }}"{{ if $method.Parameters }}, {{ template "parameterList" $method.Parameters }}{{ end }})
	if expectation != nil {
		if expectation.ObserveFn != nil {
			observe := expectation.ObserveFn.({{ template "observationCallback" $method }})
			{{- if $method.Results }}
			return observe({{ template "parameterList" $method.Parameters }})
			{{- else }}
			observe({{ template "parameterList" $method.Parameters }})
			return
			{{- end }}
		}

		if expectation.PanicArg != nil {
			panic(expectation.PanicArg)
		}

		{{- range $i, $result := $method.Results }}

		if expectation.Returns[{{ $i }}] != nil {
			{{ if $result.Name }}{{ $result.Name }}{{ else }}r{{ $i }}{{ end }} = expectation.Returns[{{ $i }}].({{ $result.Type }})
		}
		{{- end }}
	}

	return
}
{{- end }}

func (m *Mock) Instance() *Instance {
	return &m.instance
}

{{- range $method := .Methods }}

type {{ $method.Name }}MethodMatcher struct {
	matcher mocking.MethodMatcher
}

func (m *{{ $method.Name }}MethodMatcher) CreateMethodMatcher() *mocking.MethodMatcher {
	return &m.matcher
}

{{ if $method.Comment }}{{ CommentBlock $method.Comment }}
{{ end -}}
func {{ $method.Name }}{{ if $method.Parameters }}[{{ template "matcherTypeParams" $method.Parameters }}]{{ end }}({{ template "matcherParams" $method.Parameters }}) *{{ $method.Name }}MethodMatcher {
	result := {{ $method.Name }}MethodMatcher{
		matcher: mocking.MethodMatcher{
			MethodName:       "{{ $method.Name }}",
			ArgumentMatchers: make([]mocking.ArgumentMatcher, {{ len $method.Parameters }}),
		},
	}
{{ range $i, $param := $method.Parameters }}
	if matcher, ok := any({{ $param.Name }}).(mocking.Matcher[{{ $param.Type }}]); ok {
		result.matcher.ArgumentMatchers[{{ $i }}] = matcher
	} else {
		result.matcher.ArgumentMatchers[{{ $i }}] = kelpie.ExactMatch(any({{ $param.Name }}).({{ $param.Type }}))
	}
{{ end }}
	return &result
}

type {{ $method.Name }}Times struct {
	matcher *{{ $method.Name }}MethodMatcher
}

// Times allows you to restrict the number of times a particular expectation can be matched.
func (m *{{ $method.Name }}MethodMatcher) Times(times uint) *{{ $method.Name }}Times {
	m.matcher.Times = &times

	return &{{ $method.Name }}Times{
		matcher: m,
	}
}

// Once specifies that the expectation will only match once.
func (m *{{ $method.Name }}MethodMatcher) Once() *{{ $method.Name }}Times {
	return m.Times(1)
}

// Never specifies that the method has not been called. This is mainly useful for verification
// rather than mocking.
func (m *{{ $method.Name }}MethodMatcher) Never() *{{ $method.Name }}Times {
	return m.Times(0)
}

{{- if $method.Results }}

// Return returns the specified results when the method is called.
func (t *{{ $method.Name }}Times) Return({{ template "resultWithTypeList" $method.Results }}) *{{ $method.Name }}Action {
	return &{{ $method.Name }}Action{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			Returns:       []any{ {{- template "resultList" $method.Results -}} },
		},
	}
}
{{- end }}

// Panic panics using the specified argument when the method is called.
func (t *{{ $method.Name }}Times) Panic(arg any) *{{ $method.Name }}Action {
	return &{{ $method.Name }}Action{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			PanicArg:      arg,
		},
	}
}

// When calls the specified observe callback when the method is called.
func (t *{{ $method.Name }}Times) When(observe {{ template "observationCallback" $method }}) *{{ $method.Name }}Action {
	return &{{ $method.Name }}Action{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			ObserveFn:     observe,
		},
	}
}

func (t *{{ $method.Name }}Times) CreateMethodMatcher() *mocking.MethodMatcher {
	return &t.matcher.matcher
}

{{- if $method.Results }}

// Return returns the specified results when the method is called.
func (m *{{ $method.Name }}MethodMatcher) Return({{ template "resultWithTypeList" $method.Results }}) *{{ $method.Name }}Action {
	return &{{ $method.Name }}Action{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			Returns:       []any{ {{- template "resultList" $method.Results -}} },
		},
	}
}
{{- end }}

// Panic panics using the specified argument when the method is called.
func (m *{{ $method.Name }}MethodMatcher) Panic(arg any) *{{ $method.Name }}Action {
	return &{{ $method.Name }}Action{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			PanicArg:      arg,
		},
	}
}

// When calls the specified observe callback when the method is called.
func (m *{{ $method.Name }}MethodMatcher) When(observe {{ template "observationCallback" $method }}) *{{ $method.Name }}Action {
	return &{{ $method.Name }}Action{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			ObserveFn:     observe,
		},
	}
}

type {{ $method.Name }}Action struct {
	expectation mocking.Expectation
}

func (a *{{ $method.Name }}Action) CreateExpectation() *mocking.Expectation {
	return &a.expectation
}
{{- end }}
