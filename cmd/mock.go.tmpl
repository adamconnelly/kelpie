{{- define "parameterList" -}}
{{ range $i, $param := . }}{{ if $i }}, {{ end }}{{ $param.Name }} {{ $param.Type }}{{ end }}
{{- end -}}

{{- define "resultList" -}}
{{ range $i, $result := . }}{{ if $i }}, {{ end }}{{ if $result.Name }}{{ $result.Name }}{{ else }}r{{ $i }}{{ end }} {{ $result.Type }}{{ end }}
{{- end -}}

{{- define "resultTypeList" -}}
{{ range $i, $result := . }}{{ if $i }}, {{ end }}{{ $result.Type }}{{ end }}
{{- end -}}

{{- define "observationCallback" -}}
func({{ template "parameterList" .Parameters }}) ({{ template "resultTypeList" .Results }})
{{- end -}}

{{- define "matcherTypeParams" -}}
{{ range $i, $param := . }}{{ if ne $i 0 }}, {{ end }}P{{ $i }} {{ $param.Type }} | kelpie.Matcher[{{ $param.Type }}]{{ end }}
{{- end -}}

{{- define "matcherParams" -}}
{{ range $i, $param := . }}{{ if ne $i 0 }}, {{ end }}{{ $param.Name }} P{{ $i }}{{ end }}
{{- end -}}

// Code generated by Kelpie. DO NOT EDIT.
package {{ .PackageName }}

import "github.com/adamconnelly/kelpie"

type Mock struct {
	expectations []Expectation
}

{{- range $method := .Methods }}

func (m *Mock) {{ $method.Name }}({{ template "parameterList" $method.Parameters }}) ({{ template "resultList" $method.Results }}) {
    for _, expectation := range m.expectations {
		if expectation.method == "{{ $method.Name }}" {
			info := expectation.invocationDetails.({{ $method.Name }}InvocationDetails)
            if {{ range $i, $param := $method.Parameters }}{{ if $i }} && {{ end }}info.{{ $param.Name }}.IsMatch({{ $param.Name }}){{ end }} {
				if info.observe != nil {
					return info.observe({{ range $i, $param := $method.Parameters }}{{ if ne $i 0 }}, {{ end }}{{ $param.Name }}{{ end }})
				}

				if info.panicArg != nil {
					panic(info.panicArg)
				}

                return {{ range $i, $r := $method.Results }}{{ if ne $i 0 }}, {{ end }}info.{{ if $r.Name }}{{ $r.Name }}{{ else }}result{{ $i }}{{ end }}{{ end }}
			}
		}
	}

    return
}
{{- end }}

type Expectation struct {
	method            string
	invocationDetails interface{}
}

func (m *Mock) Reset() {
	m.expectations = nil
}

func (m *Mock) Setup(expectation Expectation) {
	m.expectations = append([]Expectation{expectation}, m.expectations...)
}

{{ range $method := .Methods }}
type {{ $method.Name }}InvocationDetails struct {
    {{- range $param := $method.Parameters }}
    {{ $param.Name }} kelpie.Matcher[{{ $param.Type }}]
    {{- end }}
    {{- range $i, $r := $method.Results }}
    {{ if $r.Name }}{{ $r.Name }}{{ else }}result{{ $i }}{{ end }} {{ $r.Type }}
    {{- end }}
	panicArg any
	observe {{ template "observationCallback" $method }}
}

func {{ $method.Name }}[{{ template "matcherTypeParams" $method.Parameters }}]({{ template "matcherParams" $method.Parameters }}) {{ $method.Name }}InvocationDetails {
	result := {{ $method.Name }}InvocationDetails{}
{{ range $i, $param := $method.Parameters }}
    if matcher, ok := any({{ $param.Name }}).(kelpie.Matcher[{{ $param.Type }}]); ok {
        result.{{ $param.Name }} = matcher
    } else {
        result.{{ $param.Name }} = kelpie.ExactMatch(any({{ $param.Name }}).({{ $param.Type }}))
    }
{{ end }}
    return result
}

func (a {{ $method.Name }}InvocationDetails) Return({{ template "resultList" $method.Results }}) Expectation {
{{- range $i, $r := $method.Results }}
    a.{{ if $r.Name }}{{ $r.Name }}{{ else }}result{{ $i }}{{ end }} = {{ if $r.Name }}{{ $r.Name }}{{ else }}r{{ $i }}{{ end }}
{{- end }}

	return Expectation{
		method:            "{{ $method.Name }}",
		invocationDetails: a,
	}
}

func (a {{ $method.Name }}InvocationDetails) Panic(arg any) Expectation {
	a.panicArg = arg

	return Expectation{
		method:            "{{ $method.Name }}",
		invocationDetails: a,
	}
}

func (a {{ $method.Name }}InvocationDetails) When(callback {{ template "observationCallback" $method }}) Expectation {
	a.observe = callback

	return Expectation{
		method:            "{{ $method.Name }}",
		invocationDetails: a,
	}
}
{{- end }}
