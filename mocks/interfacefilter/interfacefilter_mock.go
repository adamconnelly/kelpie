// Code generated by Kelpie. DO NOT EDIT.
package interfacefilter

import "github.com/adamconnelly/kelpie"

type Mock struct {
	kelpie.Mock
	instance Instance
}

func NewMock() *Mock {
	mock := Mock{
		instance: Instance{},
	}
	mock.instance.mock = &mock

	return &mock
}

type Instance struct {
	mock *Mock
}

func (m *Instance) Include(name string) (r0 bool) {
	expectation := m.mock.Call("Include", name)
	if expectation != nil {
		if expectation.ObserveFn() != nil {
			observe := expectation.ObserveFn().(func(name string) (bool))
			return observe(name)
		}

		if expectation.PanicArg() != nil {
			panic(expectation.PanicArg())
		}

		
		if expectation.Returns()[0] != nil {
			r0 = expectation.Returns()[0].(bool)
		}
		
	}

	return
}

func (m *Mock) Instance() *Instance {
	return &m.instance
}


type IncludeInvocationDetails struct {
	kelpie.E
}

func Include[P0 string | kelpie.Matcher[string]](name P0) *IncludeInvocationDetails {
	result := IncludeInvocationDetails{
		E: kelpie.E{
			Method: "Include",
			Args: make([]kelpie.ArgumentMatcher, 1),
		},
	}

	if matcher, ok := any(name).(kelpie.Matcher[string]); ok {
		result.Args[0] = matcher
	} else {
		result.Args[0] = kelpie.ExactMatch(any(name).(string))
	}

	return &result
}

func (a *IncludeInvocationDetails) Return(r0 bool) kelpie.Expectation {
	a.E.Ret = []any{r0}
	return a
}

func (a *IncludeInvocationDetails) Panic(arg any) kelpie.Expectation {
	a.E.Panic = arg
	return a
}

func (a *IncludeInvocationDetails) When(observe func(name string) (bool)) kelpie.Expectation {
	a.E.Observe = observe
	return a
}
