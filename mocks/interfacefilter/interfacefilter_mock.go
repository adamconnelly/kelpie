// Code generated by Kelpie. DO NOT EDIT.
package interfacefilter

import "github.com/adamconnelly/kelpie"

type Mock struct {
	kelpie.Mock
	instance Instance
}

func NewMock() *Mock {
	mock := Mock{
		instance: Instance{},
	}
	mock.instance.mock = &mock

	return &mock
}

type Instance struct {
	mock *Mock
}

func (m *Instance) Include(name string) (r0 bool) {
	expectation := m.mock.Call("Include", name)
	if expectation != nil {
		if expectation.ObserveFn != nil {
			observe := expectation.ObserveFn.(func(name string) (bool))
			return observe(name)
		}

		if expectation.PanicArg != nil {
			panic(expectation.PanicArg)
		}

		
		if expectation.Returns[0] != nil {
			r0 = expectation.Returns[0].(bool)
		}
		
	}

	return
}

func (m *Mock) Instance() *Instance {
	return &m.instance
}


type IncludeInvocationDetails struct {
	name kelpie.Matcher[string]
}

func Include[P0 string | kelpie.Matcher[string]](name P0) IncludeInvocationDetails {
	result := IncludeInvocationDetails{}

	if matcher, ok := any(name).(kelpie.Matcher[string]); ok {
		result.name = matcher
	} else {
		result.name = kelpie.ExactMatch(any(name).(string))
	}

	return result
}

func (a IncludeInvocationDetails) Return(r0 bool) *kelpie.Expectation {
	return &kelpie.Expectation{
		MethodName:       "Include",
		ArgumentMatchers: []kelpie.ArgumentMatcher{a.name},
		Returns:          []any{r0},
	}
}

func (a IncludeInvocationDetails) Panic(arg any) *kelpie.Expectation {
	return &kelpie.Expectation{
		MethodName:       "Include",
		ArgumentMatchers: []kelpie.ArgumentMatcher{a.name},
		PanicArg:         arg,
	}
}

func (a IncludeInvocationDetails) When(observe func(name string) (bool)) *kelpie.Expectation {
	return &kelpie.Expectation{
		MethodName:       "Include",
		ArgumentMatchers: []kelpie.ArgumentMatcher{a.name},
		ObserveFn:        observe,
	}
}
