// Code generated by Kelpie. DO NOT EDIT.
package userrepository

import (
	"github.com/adamconnelly/kelpie"
	"github.com/adamconnelly/kelpie/mocking"

	"github.com/adamconnelly/kelpie/examples/users"
)

type Mock struct {
	mocking.Mock
	instance instance
}

func NewMock() *Mock {
	mock := Mock{
		instance: instance{},
	}
	mock.instance.mock = &mock

	return &mock
}

type instance struct {
	mock *Mock
}

func (m *instance) FindUserByUsername(username string) (r0 *users.User, r1 error) {
	expectation := m.mock.Call("FindUserByUsername", username)
	if expectation != nil {
		if expectation.ObserveFn != nil {
			observe := expectation.ObserveFn.(func(username string) (*users.User, error))
			return observe(username)
		}

		if expectation.PanicArg != nil {
			panic(expectation.PanicArg)
		}

		if expectation.Returns[0] != nil {
			r0 = expectation.Returns[0].(*users.User)
		}

		if expectation.Returns[1] != nil {
			r1 = expectation.Returns[1].(error)
		}
	}

	return
}

func (m *instance) GetAllUsersOfType(t users.UserType) (r0 []users.User, r1 error) {
	expectation := m.mock.Call("GetAllUsersOfType", t)
	if expectation != nil {
		if expectation.ObserveFn != nil {
			observe := expectation.ObserveFn.(func(t users.UserType) ([]users.User, error))
			return observe(t)
		}

		if expectation.PanicArg != nil {
			panic(expectation.PanicArg)
		}

		if expectation.Returns[0] != nil {
			r0 = expectation.Returns[0].([]users.User)
		}

		if expectation.Returns[1] != nil {
			r1 = expectation.Returns[1].(error)
		}
	}

	return
}

func (m *Mock) Instance() *instance {
	return &m.instance
}

type findUserByUsernameMethodMatcher struct {
	matcher mocking.MethodMatcher
}

func (m *findUserByUsernameMethodMatcher) CreateMethodMatcher() *mocking.MethodMatcher {
	return &m.matcher
}

func FindUserByUsername[P0 string | mocking.Matcher[string]](username P0) *findUserByUsernameMethodMatcher {
	result := findUserByUsernameMethodMatcher{
		matcher: mocking.MethodMatcher{
			MethodName:       "FindUserByUsername",
			ArgumentMatchers: make([]mocking.ArgumentMatcher, 1),
		},
	}

	if matcher, ok := any(username).(mocking.Matcher[string]); ok {
		result.matcher.ArgumentMatchers[0] = matcher
	} else {
		result.matcher.ArgumentMatchers[0] = kelpie.ExactMatch(any(username).(string))
	}

	return &result
}

type findUserByUsernameTimes struct {
	matcher *findUserByUsernameMethodMatcher
}

// Times allows you to restrict the number of times a particular expectation can be matched.
func (m *findUserByUsernameMethodMatcher) Times(times uint) *findUserByUsernameTimes {
	m.matcher.Times = &times

	return &findUserByUsernameTimes{
		matcher: m,
	}
}

// Once specifies that the expectation will only match once.
func (m *findUserByUsernameMethodMatcher) Once() *findUserByUsernameTimes {
	return m.Times(1)
}

// Never specifies that the method has not been called. This is mainly useful for verification
// rather than mocking.
func (m *findUserByUsernameMethodMatcher) Never() *findUserByUsernameTimes {
	return m.Times(0)
}

// Return returns the specified results when the method is called.
func (t *findUserByUsernameTimes) Return(r0 *users.User, r1 error) *findUserByUsernameAction {
	return &findUserByUsernameAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			Returns:       []any{r0, r1},
		},
	}
}

// Panic panics using the specified argument when the method is called.
func (t *findUserByUsernameTimes) Panic(arg any) *findUserByUsernameAction {
	return &findUserByUsernameAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			PanicArg:      arg,
		},
	}
}

// When calls the specified observe callback when the method is called.
func (t *findUserByUsernameTimes) When(observe func(username string) (*users.User, error)) *findUserByUsernameAction {
	return &findUserByUsernameAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			ObserveFn:     observe,
		},
	}
}

func (t *findUserByUsernameTimes) CreateMethodMatcher() *mocking.MethodMatcher {
	return &t.matcher.matcher
}

// Return returns the specified results when the method is called.
func (m *findUserByUsernameMethodMatcher) Return(r0 *users.User, r1 error) *findUserByUsernameAction {
	return &findUserByUsernameAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			Returns:       []any{r0, r1},
		},
	}
}

// Panic panics using the specified argument when the method is called.
func (m *findUserByUsernameMethodMatcher) Panic(arg any) *findUserByUsernameAction {
	return &findUserByUsernameAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			PanicArg:      arg,
		},
	}
}

// When calls the specified observe callback when the method is called.
func (m *findUserByUsernameMethodMatcher) When(observe func(username string) (*users.User, error)) *findUserByUsernameAction {
	return &findUserByUsernameAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			ObserveFn:     observe,
		},
	}
}

type findUserByUsernameAction struct {
	expectation mocking.Expectation
}

func (a *findUserByUsernameAction) CreateExpectation() *mocking.Expectation {
	return &a.expectation
}

type getAllUsersOfTypeMethodMatcher struct {
	matcher mocking.MethodMatcher
}

func (m *getAllUsersOfTypeMethodMatcher) CreateMethodMatcher() *mocking.MethodMatcher {
	return &m.matcher
}

func GetAllUsersOfType[P0 users.UserType | mocking.Matcher[users.UserType]](t P0) *getAllUsersOfTypeMethodMatcher {
	result := getAllUsersOfTypeMethodMatcher{
		matcher: mocking.MethodMatcher{
			MethodName:       "GetAllUsersOfType",
			ArgumentMatchers: make([]mocking.ArgumentMatcher, 1),
		},
	}

	if matcher, ok := any(t).(mocking.Matcher[users.UserType]); ok {
		result.matcher.ArgumentMatchers[0] = matcher
	} else {
		result.matcher.ArgumentMatchers[0] = kelpie.ExactMatch(any(t).(users.UserType))
	}

	return &result
}

type getAllUsersOfTypeTimes struct {
	matcher *getAllUsersOfTypeMethodMatcher
}

// Times allows you to restrict the number of times a particular expectation can be matched.
func (m *getAllUsersOfTypeMethodMatcher) Times(times uint) *getAllUsersOfTypeTimes {
	m.matcher.Times = &times

	return &getAllUsersOfTypeTimes{
		matcher: m,
	}
}

// Once specifies that the expectation will only match once.
func (m *getAllUsersOfTypeMethodMatcher) Once() *getAllUsersOfTypeTimes {
	return m.Times(1)
}

// Never specifies that the method has not been called. This is mainly useful for verification
// rather than mocking.
func (m *getAllUsersOfTypeMethodMatcher) Never() *getAllUsersOfTypeTimes {
	return m.Times(0)
}

// Return returns the specified results when the method is called.
func (t *getAllUsersOfTypeTimes) Return(r0 []users.User, r1 error) *getAllUsersOfTypeAction {
	return &getAllUsersOfTypeAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			Returns:       []any{r0, r1},
		},
	}
}

// Panic panics using the specified argument when the method is called.
func (t *getAllUsersOfTypeTimes) Panic(arg any) *getAllUsersOfTypeAction {
	return &getAllUsersOfTypeAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			PanicArg:      arg,
		},
	}
}

// When calls the specified observe callback when the method is called.
func (t *getAllUsersOfTypeTimes) When(observe func(t users.UserType) ([]users.User, error)) *getAllUsersOfTypeAction {
	return &getAllUsersOfTypeAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			ObserveFn:     observe,
		},
	}
}

func (t *getAllUsersOfTypeTimes) CreateMethodMatcher() *mocking.MethodMatcher {
	return &t.matcher.matcher
}

// Return returns the specified results when the method is called.
func (m *getAllUsersOfTypeMethodMatcher) Return(r0 []users.User, r1 error) *getAllUsersOfTypeAction {
	return &getAllUsersOfTypeAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			Returns:       []any{r0, r1},
		},
	}
}

// Panic panics using the specified argument when the method is called.
func (m *getAllUsersOfTypeMethodMatcher) Panic(arg any) *getAllUsersOfTypeAction {
	return &getAllUsersOfTypeAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			PanicArg:      arg,
		},
	}
}

// When calls the specified observe callback when the method is called.
func (m *getAllUsersOfTypeMethodMatcher) When(observe func(t users.UserType) ([]users.User, error)) *getAllUsersOfTypeAction {
	return &getAllUsersOfTypeAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			ObserveFn:     observe,
		},
	}
}

type getAllUsersOfTypeAction struct {
	expectation mocking.Expectation
}

func (a *getAllUsersOfTypeAction) CreateExpectation() *mocking.Expectation {
	return &a.expectation
}
