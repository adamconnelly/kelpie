// Code generated by Kelpie. DO NOT EDIT.
package encrypter

import (
	"github.com/adamconnelly/kelpie"
	"github.com/adamconnelly/kelpie/mocking"
)

type Mock struct {
	mocking.Mock
	instance instance
}

func NewMock() *Mock {
	mock := Mock{
		instance: instance{},
	}
	mock.instance.mock = &mock

	return &mock
}

type instance struct {
	mock *Mock
}

func (m *instance) Encrypt(value string) (r0 string, r1 error) {
	expectation := m.mock.Call("Encrypt", value)
	if expectation != nil {
		if expectation.ObserveFn != nil {
			observe := expectation.ObserveFn.(func(value string) (string, error))
			return observe(value)
		}

		if expectation.PanicArg != nil {
			panic(expectation.PanicArg)
		}

		if expectation.Returns[0] != nil {
			r0 = expectation.Returns[0].(string)
		}

		if expectation.Returns[1] != nil {
			r1 = expectation.Returns[1].(error)
		}
	}

	return
}

func (m *Mock) Instance() *instance {
	return &m.instance
}

type encryptMethodMatcher struct {
	matcher mocking.MethodMatcher
}

func (m *encryptMethodMatcher) CreateMethodMatcher() *mocking.MethodMatcher {
	return &m.matcher
}

func Encrypt[P0 string | mocking.Matcher[string]](value P0) *encryptMethodMatcher {
	result := encryptMethodMatcher{
		matcher: mocking.MethodMatcher{
			MethodName:       "Encrypt",
			ArgumentMatchers: make([]mocking.ArgumentMatcher, 1),
		},
	}

	if matcher, ok := any(value).(mocking.Matcher[string]); ok {
		result.matcher.ArgumentMatchers[0] = matcher
	} else {
		result.matcher.ArgumentMatchers[0] = kelpie.ExactMatch(any(value).(string))
	}

	return &result
}

type encryptTimes struct {
	matcher *encryptMethodMatcher
}

// Times allows you to restrict the number of times a particular expectation can be matched.
func (m *encryptMethodMatcher) Times(times uint) *encryptTimes {
	m.matcher.Times = &times

	return &encryptTimes{
		matcher: m,
	}
}

// Once specifies that the expectation will only match once.
func (m *encryptMethodMatcher) Once() *encryptTimes {
	return m.Times(1)
}

// Never specifies that the method has not been called. This is mainly useful for verification
// rather than mocking.
func (m *encryptMethodMatcher) Never() *encryptTimes {
	return m.Times(0)
}

// Return returns the specified results when the method is called.
func (t *encryptTimes) Return(r0 string, r1 error) *encryptAction {
	return &encryptAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			Returns:       []any{r0, r1},
		},
	}
}

// Panic panics using the specified argument when the method is called.
func (t *encryptTimes) Panic(arg any) *encryptAction {
	return &encryptAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			PanicArg:      arg,
		},
	}
}

// When calls the specified observe callback when the method is called.
func (t *encryptTimes) When(observe func(value string) (string, error)) *encryptAction {
	return &encryptAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			ObserveFn:     observe,
		},
	}
}

func (t *encryptTimes) CreateMethodMatcher() *mocking.MethodMatcher {
	return &t.matcher.matcher
}

// Return returns the specified results when the method is called.
func (m *encryptMethodMatcher) Return(r0 string, r1 error) *encryptAction {
	return &encryptAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			Returns:       []any{r0, r1},
		},
	}
}

// Panic panics using the specified argument when the method is called.
func (m *encryptMethodMatcher) Panic(arg any) *encryptAction {
	return &encryptAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			PanicArg:      arg,
		},
	}
}

// When calls the specified observe callback when the method is called.
func (m *encryptMethodMatcher) When(observe func(value string) (string, error)) *encryptAction {
	return &encryptAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			ObserveFn:     observe,
		},
	}
}

type encryptAction struct {
	expectation mocking.Expectation
}

func (a *encryptAction) CreateExpectation() *mocking.Expectation {
	return &a.expectation
}
