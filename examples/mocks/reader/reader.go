// Code generated by Kelpie. DO NOT EDIT.
package reader

import (
	"github.com/adamconnelly/kelpie"
	"github.com/adamconnelly/kelpie/mocking"
)

type Mock struct {
	mocking.Mock
	instance instance
}

func NewMock() *Mock {
	mock := Mock{
		instance: instance{},
	}
	mock.instance.mock = &mock

	return &mock
}

type instance struct {
	mock *Mock
}

func (m *instance) Read(p []byte) (n int, err error) {
	expectation := m.mock.Call("Read", p)
	if expectation != nil {
		if expectation.ObserveFn != nil {
			observe := expectation.ObserveFn.(func(p []byte) (int, error))
			return observe(p)
		}

		if expectation.PanicArg != nil {
			panic(expectation.PanicArg)
		}

		if expectation.Returns[0] != nil {
			n = expectation.Returns[0].(int)
		}

		if expectation.Returns[1] != nil {
			err = expectation.Returns[1].(error)
		}
	}

	return
}

func (m *Mock) Instance() *instance {
	return &m.instance
}

type readMethodMatcher struct {
	matcher mocking.MethodMatcher
}

func (m *readMethodMatcher) CreateMethodMatcher() *mocking.MethodMatcher {
	return &m.matcher
}

func Read[P0 []byte | mocking.Matcher[[]byte]](p P0) *readMethodMatcher {
	result := readMethodMatcher{
		matcher: mocking.MethodMatcher{
			MethodName:       "Read",
			ArgumentMatchers: make([]mocking.ArgumentMatcher, 1),
		},
	}

	if matcher, ok := any(p).(mocking.Matcher[[]byte]); ok {
		result.matcher.ArgumentMatchers[0] = matcher
	} else {
		result.matcher.ArgumentMatchers[0] = kelpie.ExactMatch(any(p).([]byte))
	}

	return &result
}

type readTimes struct {
	matcher *readMethodMatcher
}

// Times allows you to restrict the number of times a particular expectation can be matched.
func (m *readMethodMatcher) Times(times uint) *readTimes {
	m.matcher.Times = &times

	return &readTimes{
		matcher: m,
	}
}

// Once specifies that the expectation will only match once.
func (m *readMethodMatcher) Once() *readTimes {
	return m.Times(1)
}

// Never specifies that the method has not been called. This is mainly useful for verification
// rather than mocking.
func (m *readMethodMatcher) Never() *readTimes {
	return m.Times(0)
}

// Return returns the specified results when the method is called.
func (t *readTimes) Return(n int, err error) *readAction {
	return &readAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			Returns:       []any{n, err},
		},
	}
}

// Panic panics using the specified argument when the method is called.
func (t *readTimes) Panic(arg any) *readAction {
	return &readAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			PanicArg:      arg,
		},
	}
}

// When calls the specified observe callback when the method is called.
func (t *readTimes) When(observe func(p []byte) (int, error)) *readAction {
	return &readAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			ObserveFn:     observe,
		},
	}
}

func (t *readTimes) CreateMethodMatcher() *mocking.MethodMatcher {
	return &t.matcher.matcher
}

// Return returns the specified results when the method is called.
func (m *readMethodMatcher) Return(n int, err error) *readAction {
	return &readAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			Returns:       []any{n, err},
		},
	}
}

// Panic panics using the specified argument when the method is called.
func (m *readMethodMatcher) Panic(arg any) *readAction {
	return &readAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			PanicArg:      arg,
		},
	}
}

// When calls the specified observe callback when the method is called.
func (m *readMethodMatcher) When(observe func(p []byte) (int, error)) *readAction {
	return &readAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			ObserveFn:     observe,
		},
	}
}

type readAction struct {
	expectation mocking.Expectation
}

func (a *readAction) CreateExpectation() *mocking.Expectation {
	return &a.expectation
}
