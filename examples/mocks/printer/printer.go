// Code generated by Kelpie. DO NOT EDIT.
package printer

import (
	"github.com/adamconnelly/kelpie"
	"github.com/adamconnelly/kelpie/mocking"
)

type Mock struct {
	mocking.Mock
	instance instance
}

func NewMock() *Mock {
	mock := Mock{
		instance: instance{},
	}
	mock.instance.mock = &mock

	return &mock
}

type instance struct {
	mock *Mock
}

func (m *instance) Printf(formatString string, args ...interface{}) (r0 string) {
	expectation := m.mock.Call("Printf", formatString, args)
	if expectation != nil {
		if expectation.ObserveFn != nil {
			observe := expectation.ObserveFn.(func(formatString string, args ...interface{}) string)
			return observe(formatString, args...)
		}

		if expectation.PanicArg != nil {
			panic(expectation.PanicArg)
		}

		if expectation.Returns[0] != nil {
			r0 = expectation.Returns[0].(string)
		}
	}

	return
}

func (m *Mock) Instance() *instance {
	return &m.instance
}

type printfMethodMatcher struct {
	matcher mocking.MethodMatcher
}

func (m *printfMethodMatcher) CreateMethodMatcher() *mocking.MethodMatcher {
	return &m.matcher
}

func Printf[P0 string | mocking.Matcher[string], P1 interface{} | mocking.Matcher[interface{}]](formatString P0, args ...P1) *printfMethodMatcher {
	result := printfMethodMatcher{
		matcher: mocking.MethodMatcher{
			MethodName:       "Printf",
			ArgumentMatchers: make([]mocking.ArgumentMatcher, 2),
		},
	}

	if matcher, ok := any(formatString).(mocking.Matcher[string]); ok {
		result.matcher.ArgumentMatchers[0] = matcher
	} else {
		result.matcher.ArgumentMatchers[0] = kelpie.ExactMatch(any(formatString).(string))
	}

	var matchers []mocking.ArgumentMatcher
	for _, arg := range args {
		if matcher, ok := any(arg).(mocking.ArgumentMatcher); ok {
			matchers = append(matchers, matcher)
		} else {
			matchers = append(matchers, kelpie.ExactMatch(any(arg).(interface{})))
		}
	}

	result.matcher.ArgumentMatchers[1] = mocking.Variadic(matchers)

	return &result
}

type printfTimes struct {
	matcher *printfMethodMatcher
}

// Times allows you to restrict the number of times a particular expectation can be matched.
func (m *printfMethodMatcher) Times(times uint) *printfTimes {
	m.matcher.Times = &times

	return &printfTimes{
		matcher: m,
	}
}

// Once specifies that the expectation will only match once.
func (m *printfMethodMatcher) Once() *printfTimes {
	return m.Times(1)
}

// Never specifies that the method has not been called. This is mainly useful for verification
// rather than mocking.
func (m *printfMethodMatcher) Never() *printfTimes {
	return m.Times(0)
}

// Return returns the specified results when the method is called.
func (t *printfTimes) Return(r0 string) *printfAction {
	return &printfAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			Returns:       []any{r0},
		},
	}
}

// Panic panics using the specified argument when the method is called.
func (t *printfTimes) Panic(arg any) *printfAction {
	return &printfAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			PanicArg:      arg,
		},
	}
}

// When calls the specified observe callback when the method is called.
func (t *printfTimes) When(observe func(formatString string, args ...interface{}) string) *printfAction {
	return &printfAction{
		expectation: mocking.Expectation{
			MethodMatcher: &t.matcher.matcher,
			ObserveFn:     observe,
		},
	}
}

func (t *printfTimes) CreateMethodMatcher() *mocking.MethodMatcher {
	return &t.matcher.matcher
}

// Return returns the specified results when the method is called.
func (m *printfMethodMatcher) Return(r0 string) *printfAction {
	return &printfAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			Returns:       []any{r0},
		},
	}
}

// Panic panics using the specified argument when the method is called.
func (m *printfMethodMatcher) Panic(arg any) *printfAction {
	return &printfAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			PanicArg:      arg,
		},
	}
}

// When calls the specified observe callback when the method is called.
func (m *printfMethodMatcher) When(observe func(formatString string, args ...interface{}) string) *printfAction {
	return &printfAction{
		expectation: mocking.Expectation{
			MethodMatcher: &m.matcher,
			ObserveFn:     observe,
		},
	}
}

type printfAction struct {
	expectation mocking.Expectation
}

func (a *printfAction) CreateExpectation() *mocking.Expectation {
	return &a.expectation
}
