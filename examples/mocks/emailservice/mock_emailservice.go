// Code generated by Kelpie. DO NOT EDIT.
package emailservice

import "github.com/adamconnelly/kelpie"

type Mock struct {
	kelpie.Mock
	instance Instance
}

func NewMock() *Mock {
	mock := Mock{
		instance: Instance{},
	}
	mock.instance.mock = &mock

	return &mock
}

type Instance struct {
	mock *Mock
}

func (m *Instance) Send(sender string, recipient string, body string) (cost float64, err error) {
	expectation := m.mock.Call("Send", sender, recipient, body)
	if expectation != nil {
		if expectation.ObserveFn != nil {
			observe := expectation.ObserveFn.(func(sender string, recipient string, body string) (float64, error))
			return observe(sender, recipient, body)
		}

		if expectation.PanicArg != nil {
			panic(expectation.PanicArg)
		}

		
		if expectation.Returns[0] != nil {
			cost = expectation.Returns[0].(float64)
		}
		
		if expectation.Returns[1] != nil {
			err = expectation.Returns[1].(error)
		}
		
	}

	return
}

func (m *Mock) Instance() *Instance {
	return &m.instance
}


type SendInvocationDetails struct {
	sender kelpie.Matcher[string]
	recipient kelpie.Matcher[string]
	body kelpie.Matcher[string]
}

func Send[P0 string | kelpie.Matcher[string], P1 string | kelpie.Matcher[string], P2 string | kelpie.Matcher[string]](sender P0, recipient P1, body P2) SendInvocationDetails {
	result := SendInvocationDetails{}

	if matcher, ok := any(sender).(kelpie.Matcher[string]); ok {
		result.sender = matcher
	} else {
		result.sender = kelpie.ExactMatch(any(sender).(string))
	}

	if matcher, ok := any(recipient).(kelpie.Matcher[string]); ok {
		result.recipient = matcher
	} else {
		result.recipient = kelpie.ExactMatch(any(recipient).(string))
	}

	if matcher, ok := any(body).(kelpie.Matcher[string]); ok {
		result.body = matcher
	} else {
		result.body = kelpie.ExactMatch(any(body).(string))
	}

	return result
}

func (a SendInvocationDetails) Return(cost float64, err error) *kelpie.Expectation {
	return &kelpie.Expectation{
		MethodName:       "Send",
		ArgumentMatchers: []kelpie.ArgumentMatcher{ a.sender, a.recipient, a.body },
		Returns:          []any{ cost, err },
	}
}

func (a SendInvocationDetails) Panic(arg any) *kelpie.Expectation {
	return &kelpie.Expectation{
		MethodName:       "Send",
		ArgumentMatchers: []kelpie.ArgumentMatcher{ a.sender, a.recipient, a.body },
		PanicArg:         arg,
	}
}

func (a SendInvocationDetails) When(observe func(sender string, recipient string, body string) (float64, error)) *kelpie.Expectation {
	return &kelpie.Expectation{
		MethodName:       "Send",
		ArgumentMatchers: []kelpie.ArgumentMatcher{ a.sender, a.recipient, a.body },
		ObserveFn:        observe,
	}
}
