// Code generated by Kelpie. DO NOT EDIT.
package emailservice

import "github.com/adamconnelly/kelpie"

type Mock struct {
	expectations 	[]Expectation
	instance		Instance
}

func NewMock() *Mock {
	mock := Mock{
		instance: Instance{},
	}
	mock.instance.mock = &mock

	return &mock
}

type Instance struct {
	mock *Mock
}

func (m *Instance) Send(sender string, recipient string, body string) (cost float64, err error) {
	for _, expectation := range m.mock.expectations {
		if expectation.method == "Send" {
			info := expectation.invocationDetails.(SendInvocationDetails)
			if info.sender.IsMatch(sender) && info.recipient.IsMatch(recipient) && info.body.IsMatch(body) {
				if info.observe != nil {
					return info.observe(sender, recipient, body)
				}

				if info.panicArg != nil {
					panic(info.panicArg)
				}

				return info.cost, info.err
			}
		}
	}

	return
}

type Expectation struct {
	method            string
	invocationDetails interface{}
}

func (m *Mock) Instance() *Instance {
	return &m.instance
}

func (m *Mock) Reset() {
	m.expectations = nil
}

func (m *Mock) Setup(expectation Expectation) {
	m.expectations = append([]Expectation{expectation}, m.expectations...)
}


type SendInvocationDetails struct {
	sender kelpie.Matcher[string]
	recipient kelpie.Matcher[string]
	body kelpie.Matcher[string]
	cost float64
	err error
	panicArg any
	observe func(sender string, recipient string, body string) (float64, error)
}

func Send[P0 string | kelpie.Matcher[string], P1 string | kelpie.Matcher[string], P2 string | kelpie.Matcher[string]](sender P0, recipient P1, body P2) SendInvocationDetails {
	result := SendInvocationDetails{}

	if matcher, ok := any(sender).(kelpie.Matcher[string]); ok {
		result.sender = matcher
	} else {
		result.sender = kelpie.ExactMatch(any(sender).(string))
	}

	if matcher, ok := any(recipient).(kelpie.Matcher[string]); ok {
		result.recipient = matcher
	} else {
		result.recipient = kelpie.ExactMatch(any(recipient).(string))
	}

	if matcher, ok := any(body).(kelpie.Matcher[string]); ok {
		result.body = matcher
	} else {
		result.body = kelpie.ExactMatch(any(body).(string))
	}

	return result
}

func (a SendInvocationDetails) Return(cost float64, err error) Expectation {
	a.cost = cost
	a.err = err

	return Expectation{
		method:            "Send",
		invocationDetails: a,
	}
}

func (a SendInvocationDetails) Panic(arg any) Expectation {
	a.panicArg = arg

	return Expectation{
		method:            "Send",
		invocationDetails: a,
	}
}

func (a SendInvocationDetails) When(callback func(sender string, recipient string, body string) (float64, error)) Expectation {
	a.observe = callback

	return Expectation{
		method:            "Send",
		invocationDetails: a,
	}
}
