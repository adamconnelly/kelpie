// Code generated by Kelpie. DO NOT EDIT.
package emailservice

import "github.com/adamconnelly/kelpie"

type Mock struct {
	kelpie.Mock
	instance Instance
}

func NewMock() *Mock {
	mock := Mock{
		instance: Instance{},
	}
	mock.instance.mock = &mock

	return &mock
}

type Instance struct {
	mock *Mock
}

func (m *Instance) Send(sender string, recipient string, body string) (cost float64, err error) {
	expectation := m.mock.Call("Send", sender, recipient, body)
	if expectation != nil {
		if expectation.ObserveFn() != nil {
			observe := expectation.ObserveFn().(func(sender string, recipient string, body string) (float64, error))
			return observe(sender, recipient, body)
		}

		if expectation.PanicArg() != nil {
			panic(expectation.PanicArg())
		}

		
		if expectation.Returns()[0] != nil {
			cost = expectation.Returns()[0].(float64)
		}
		
		if expectation.Returns()[1] != nil {
			err = expectation.Returns()[1].(error)
		}
		
	}

	return
}

func (m *Mock) Instance() *Instance {
	return &m.instance
}


type SendInvocationDetails struct {
	kelpie.E
}

func Send[P0 string | kelpie.Matcher[string], P1 string | kelpie.Matcher[string], P2 string | kelpie.Matcher[string]](sender P0, recipient P1, body P2) *SendInvocationDetails {
	result := SendInvocationDetails{
		E: kelpie.E{
			Method: "Send",
			Args: make([]kelpie.ArgumentMatcher, 3),
		},
	}

	if matcher, ok := any(sender).(kelpie.Matcher[string]); ok {
		result.Args[0] = matcher
	} else {
		result.Args[0] = kelpie.ExactMatch(any(sender).(string))
	}

	if matcher, ok := any(recipient).(kelpie.Matcher[string]); ok {
		result.Args[1] = matcher
	} else {
		result.Args[1] = kelpie.ExactMatch(any(recipient).(string))
	}

	if matcher, ok := any(body).(kelpie.Matcher[string]); ok {
		result.Args[2] = matcher
	} else {
		result.Args[2] = kelpie.ExactMatch(any(body).(string))
	}

	return &result
}

func (a *SendInvocationDetails) Return(cost float64, err error) kelpie.Expectation {
	a.E.Ret = []any{cost, err}
	return a
}

func (a *SendInvocationDetails) Panic(arg any) kelpie.Expectation {
	a.E.Panic = arg
	return a
}

func (a *SendInvocationDetails) When(observe func(sender string, recipient string, body string) (float64, error)) kelpie.Expectation {
	a.E.Observe = observe
	return a
}
